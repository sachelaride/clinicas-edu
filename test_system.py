#!/usr/bin/env python3
"""
Script de teste para o Sistema de Cl√≠nicas Educacionais
Verifica se todas as funcionalidades principais est√£o funcionando corretamente
"""

import sys
import os
import asyncio
import httpx
from datetime import datetime, date

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todas as importa√ß√µes est√£o funcionando"""
    print("üîç Testando importa√ß√µes...")
    
    try:
        # Testa importa√ß√µes b√°sicas
        import kivy
        print("  ‚úÖ Kivy importado com sucesso")
        
        import api
        print("  ‚úÖ M√≥dulo API importado com sucesso")
        
        # Testa importa√ß√µes das telas originais
        from screens.login_screen import LoginScreen
        from screens.patient_management_screen import PatientManagementScreen
        from screens.appointment_management_screen import AppointmentManagementScreen
        print("  ‚úÖ Telas originais importadas com sucesso")
        
        # Testa importa√ß√µes das telas melhoradas
        from screens.improved_appointment_screen import ImprovedAppointmentScreen
        from screens.improved_patient_screen import ImprovedPatientScreen
        from screens.improved_theme_settings_screen import ImprovedThemeSettingsScreen
        print("  ‚úÖ Telas melhoradas importadas com sucesso")
        
        # Testa gerenciador de temas
        from app.core.theme_manager import theme_manager
        print(f"  ‚úÖ Gerenciador de temas carregado (tema atual: {theme_manager.current_theme})")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na importa√ß√£o: {e}")
        return False

def test_theme_manager():
    """Testa o gerenciador de temas"""
    print("\nüé® Testando gerenciador de temas...")
    
    try:
        from app.core.theme_manager import theme_manager
        
        # Testa carregamento de temas
        initial_theme_count = len(theme_manager.available_themes)
        print(f"  ‚úÖ {initial_theme_count} temas carregados")
        
        # Testa mudan√ßa de tema
        original_theme = theme_manager.current_theme
        
        # Tenta aplicar diferentes temas
        test_themes = ['modern_medical', 'dark_medical', 'soft_green']
        for theme_name in test_themes:
            if theme_name in theme_manager.available_themes:
                success = theme_manager.set_theme(theme_name)
                if success:
                    print(f"  ‚úÖ Tema '{theme_name}' aplicado com sucesso")
                else:
                    print(f"  ‚ùå Falha ao aplicar tema '{theme_name}'")
        
        # Restaura tema original
        theme_manager.set_theme(original_theme)
        print(f"  ‚úÖ Tema original '{original_theme}' restaurado")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro no gerenciador de temas: {e}")
        return False

def test_models():
    """Testa os modelos de dados"""
    print("\nüìä Testando modelos de dados...")
    
    try:
        # Testa importa√ß√£o dos modelos
        from app.models.pacientes import Paciente
        from app.models.orcamentos import Orcamento
        from app.models.prontuarios import Prontuario
        from app.models.documentos_paciente import DocumentoPaciente
        from app.models.responsaveis import Responsavel
        from app.models.agendamentos import Agendamento
        print("  ‚úÖ Todos os modelos importados com sucesso")
        
        # Verifica se os relacionamentos est√£o definidos
        paciente_relationships = ['orcamentos', 'agendamentos']
        for rel in paciente_relationships:
            if hasattr(Paciente, rel):
                print(f"  ‚úÖ Relacionamento Paciente.{rel} definido")
            else:
                print(f"  ‚ö†Ô∏è Relacionamento Paciente.{rel} n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro nos modelos: {e}")
        return False

def test_api_structure():
    """Testa a estrutura da API"""
    print("\nüåê Testando estrutura da API...")
    
    try:
        # Verifica se os arquivos de rota existem
        routes_dir = "app/routes"
        expected_routes = [
            'pacientes.py', 'agendamentos.py', 'planos_custo.py',
            'prontuarios.py', 'documentos_paciente.py', 'responsaveis.py'
        ]
        
        for route_file in expected_routes:
            route_path = os.path.join(routes_dir, route_file)
            if os.path.exists(route_path):
                print(f"  ‚úÖ Rota {route_file} encontrada")
            else:
                print(f"  ‚ùå Rota {route_file} n√£o encontrada")
        
        # Testa importa√ß√£o do m√≥dulo principal da API
        from app.main import app
        print("  ‚úÖ Aplica√ß√£o FastAPI importada com sucesso")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro na estrutura da API: {e}")
        return False

def test_screen_functionality():
    """Testa funcionalidades b√°sicas das telas"""
    print("\nüì± Testando funcionalidades das telas...")
    
    try:
        # Testa cria√ß√£o das telas melhoradas
        from screens.improved_patient_screen import ImprovedPatientScreen
        from screens.improved_appointment_screen import ImprovedAppointmentScreen
        from screens.improved_theme_settings_screen import ImprovedThemeSettingsScreen
        
        # Cria inst√¢ncias das telas
        patient_screen = ImprovedPatientScreen()
        appointment_screen = ImprovedAppointmentScreen()
        theme_screen = ImprovedThemeSettingsScreen()
        
        print("  ‚úÖ Telas melhoradas criadas com sucesso")
        
        # Verifica se as propriedades essenciais existem
        if hasattr(patient_screen, 'patients_data'):
            print("  ‚úÖ PatientScreen.patients_data definido")
        
        if hasattr(appointment_screen, 'appointments_data'):
            print("  ‚úÖ AppointmentScreen.appointments_data definido")
        
        if hasattr(theme_screen, 'available_themes'):
            print("  ‚úÖ ThemeScreen.available_themes definido")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro nas funcionalidades das telas: {e}")
        return False

def test_file_structure():
    """Testa a estrutura de arquivos do projeto"""
    print("\nüìÅ Testando estrutura de arquivos...")
    
    essential_files = [
        'main.py',
        'main_improved.py',
        'api.py',
        'app/main.py',
        'app/core/theme_manager.py',
        'themes/modern_medical_theme.json',
        'screens/improved_patient_screen.py',
        'screens/improved_appointment_screen.py',
        'screens/improved_theme_settings_screen.py'
    ]
    
    missing_files = []
    for file_path in essential_files:
        if os.path.exists(file_path):
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} n√£o encontrado")
            missing_files.append(file_path)
    
    if not missing_files:
        print("  ‚úÖ Todos os arquivos essenciais est√£o presentes")
        return True
    else:
        print(f"  ‚ö†Ô∏è {len(missing_files)} arquivos essenciais est√£o faltando")
        return False

def test_theme_files():
    """Testa os arquivos de tema"""
    print("\nüé® Testando arquivos de tema...")
    
    try:
        import json
        
        # Testa o arquivo de tema moderno
        theme_file = 'themes/modern_medical_theme.json'
        if os.path.exists(theme_file):
            with open(theme_file, 'r', encoding='utf-8') as f:
                themes = json.load(f)
                print(f"  ‚úÖ {len(themes)} temas carregados de {theme_file}")
                
                # Verifica se os temas t√™m as propriedades necess√°rias
                for theme_id, theme_data in themes.items():
                    required_props = ['name', 'primary_color', 'secondary_color', 'accent_color']
                    missing_props = [prop for prop in required_props if prop not in theme_data]
                    
                    if not missing_props:
                        print(f"  ‚úÖ Tema '{theme_id}' est√° completo")
                    else:
                        print(f"  ‚ö†Ô∏è Tema '{theme_id}' est√° faltando: {missing_props}")
        else:
            print(f"  ‚ùå Arquivo de tema {theme_file} n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erro nos arquivos de tema: {e}")
        return False

def generate_test_report():
    """Gera um relat√≥rio completo dos testes"""
    print("\n" + "="*60)
    print("üìã RELAT√ìRIO DE TESTES DO SISTEMA")
    print("="*60)
    
    tests = [
        ("Importa√ß√µes", test_imports),
        ("Gerenciador de Temas", test_theme_manager),
        ("Modelos de Dados", test_models),
        ("Estrutura da API", test_api_structure),
        ("Funcionalidades das Telas", test_screen_functionality),
        ("Estrutura de Arquivos", test_file_structure),
        ("Arquivos de Tema", test_theme_files)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{test_name}:")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"  ‚ùå Erro inesperado: {e}")
            results.append((test_name, False))
    
    # Resumo final
    print("\n" + "="*60)
    print("üìä RESUMO DOS TESTES")
    print("="*60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<40} {status}")
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema est√° funcionando corretamente.")
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.")
    
    return passed == total

if __name__ == "__main__":
    print("üöÄ Iniciando testes do Sistema de Cl√≠nicas Educacionais")
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    success = generate_test_report()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)

